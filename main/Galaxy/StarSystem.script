go.property("Etoile_nb", 0)
go.property("Etoile_Type", 0)
go.property("Etoile_Taille", 0)

function init(self)
	-- require "main.Galaxy.StarSystem"

	-- pprint (" *** " .. galaxie.Ref.Etoiles_Type[self.Etoile_Type] .. " ***")

	self.orbitals = {"1","2","3","4","5"}

	
	-- Orbital objects

	pprint (galaxie.etoiles.nom[self.Etoile_nb])

	local temp_chaud = math.random(0, galaxie.Ref.Orbitals_temp.chaud[self.Etoile_Type])
	local temp_froid = math.random(0, galaxie.Ref.Orbitals_temp.chaud[self.Etoile_Type]) + temp_chaud
	local temp_counter = 0
	for i = 1,galaxie.Ref.NbOrbits do

		self.orbitals[i] = {"type", "genre","temp_zone", "wet_zone"}
		self.orbitals[i]["wet_zone"] = {"orbit","zones"}
		self.orbitals[i]["wet_zone"]["zones"] = {}
		
		-- Using the "chance" value in liste_orbitals as weights
		local b = math.random(1,galaxie.Ref.Orbitals_Types_Chance[#galaxie.Ref.Orbitals_Types_Chance])
		-- pprint(galaxie.Ref.Orbitals_Types_Chance[#galaxie.Ref.Orbitals_Types_Chance])
		-- pprint (b)
		-- pprint (galaxie.Ref.Orbitals_Types_Chance)
		local b2 = 1
		while b > galaxie.Ref.Orbitals_Types_Chance[b2] do
			b2 = b2 + 1
		end
		self.orbitals[i]["type"] = b2
				
		local b2 = math.random(#galaxie["Ref"]["Orbitals_Types"][b2]["genre"])
		self.orbitals[i]["genre"] = b2
		
		-- orbital temp zones
		temp_planetes = {chaud = 0, tempere = 0, froid = 0}
		if i <= (temp_chaud) then
			temp_counter = 1
			temp_planetes.chaud = temp_planetes.chaud + 1
		elseif i <= (temp_froid) then
			temp_counter = 2
			temp_planetes.tempere = temp_planetes.tempere + 1
		else
			temp_counter = 3
			temp_planetes.froid = temp_planetes.froid + 1
		end
		self.orbitals[i]["temp_zone"] = temp_counter
		
		-- orbital wet zone
		-- choose randomly a wet zone (number) for the orbit, then put its number in the orbital webzone array
		local temp_wetzone = 1
		local w = math.random ( #galaxie.Ref.Orbitals_wet.nom )
		self.orbitals[i]["wet_zone"]["orbit"] = w
		-- put the wet zone of the orbit in the orbital wet array, then shuffling them
		-- pprint (galaxie.Ref.Orbitals_wet.nb_zones_water[self.orbitals[i]["wet_zone"]["orbit"]])
		local w={}
		for j = 1,3 do
			w[j] = galaxie.Ref.Orbitals_wet.nb_zones_water[self.orbitals[i]["wet_zone"]["orbit"]][j]
		end
		for j = 3, 2, -1 do
			local k = math.random(3)
			w[j], w[k] = w[k], w[j]
		end

		
	--		pprint(i .. " " .. tostring(galaxie["Ref"]["Orbitals_Types"][self.orbitals[i]["type"]]["nom"]))
	--		pprint(tostring(galaxie["Ref"]["Orbitals_Types"][self.orbitals[i]["type"]]["genre"][self.orbitals[i]["genre"]]))
	--		pprint(tostring(galaxie.Ref.Orbitals_temp.nom[self.orbitals[i]["temp_zone"]]))
	--		pprint(tostring(galaxie.Ref.Orbitals_wet.nom[self.orbitals[i]["wet_zone"]]))
	end

	pprint("...")
	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)

end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
