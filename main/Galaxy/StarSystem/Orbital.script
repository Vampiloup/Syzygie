go.property("etoile", 0)
go.property("orbite", 0)
go.property("pos_on_orbit",0)
go.property("rayon_orbit",0)
go.property("angle_orbit",0)

function init(self)
	-- Starting position of the orbital object at start
	self.angle_orbit = game_ref.twopi * math.random()
	self.rayon_orbit = self.orbite * 6 + 4
	local x1 = self.rayon_orbit * math.cos(self.angle_orbit)
	local y1 = self.rayon_orbit * math.sin(self.angle_orbit)
	
	self.pos_on_orbit = vmath.vector3(x1, y1, 1)
	-- go.set_position is in update, because StarSystem has no position at the moment of Orbital creation

end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)

	-- rotation orbitals
	self.angle_orbit = self.angle_orbit + (0.005 / self.orbite)
	if self.angle_orbit > game_ref.twopi then
		self.angle_orbit = 0
	end
	local x1 = self.rayon_orbit * math.cos(self.angle_orbit)
	local y1 = self.rayon_orbit * math.sin(self.angle_orbit)
	self.pos_on_orbit = vmath.vector3(x1, y1, 1)
	-- set position of the orbital object
	go.set_position(self.pos_on_orbit, ".")
	
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)

	if message_id == hash("trigger_response") then
		if message.enter then
			--pprint ("Orbital entree" .. tostring(self.orbite))
			-- take action for entry
			if not collision_global_orbital[self.etoile] then
				collision_global_orbital[self.etoile] = {}
			end
			collision_global_orbital[self.etoile]["time"] = socket.gettime()
			collision_global_orbital[self.etoile]["orbital"] = self.orbite
		else
			--pprint ("Orbital sortie" .. tostring(self.orbite))
			-- take action for exit
			collision_global_orbital[self.etoile] = nil
		end
	end
	
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
