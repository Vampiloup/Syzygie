function init(self)

	-- General box
	go.set("#Fond_pixel_1", "scale.y", 1080*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
	go.set("#Fond_pixel_1", "scale.x",  320*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
	go.set("#Fond_pixel_2", "scale.y", 1070*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
	go.set("#Fond_pixel_2", "scale.x",  310*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
	go.set("#Fond_pixel_3", "scale.y", 1064*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
	go.set("#Fond_pixel_3", "scale.x",  306*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
	msg.post("#Fond_pixel_2", "play_animation", {id = hash("pixel_rouge_ff0000")})
	msg.post("#Fond_pixel_3", "play_animation", {id = hash("pixel_anthracite_4d4d4d")})
	local box = physics.get_shape("#collisionobject", "my_box")
	box.dimensions = vmath.vector3(320*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)),1080*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)),15)
	physics.set_shape("#collisionobject", "my_box", box)

	-- Label : Star name

	go.set("Label_Star_Name", "scale.x", 1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
	go.set("Label_Star_Name", "scale.y", 1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
	go.set("Label_Star_Name", "position.y", 500*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))


		
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)

	local world_x, world_y  = screen_to_world(160, game_ref.screen_Y/2,1)
	go.set_position(vmath.vector3(world_x, world_y, 4), ".")
	
	
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)

	if message_id == hash("trigger_response") then
		if message.enter then
			msg.post("/Curseur", "Gui_Star_Screen", {entree = true})
		else
			msg.post("/Curseur", "Gui_Star_Screen", {entree = false})
		end
	end
	
	if message_id == hash("etoile_click") then
		label.set_text("Label_Star_Name", galaxie.etoiles.nom[message.etoile])
	
	elseif message_id == hash("orbital_click") then 
		--pprint(galaxie.etoiles.nom[message.etoile] .. " -- " .. message.orbital)
	
	end
	
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end