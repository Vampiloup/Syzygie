-- ID from Star triggered by cursor entry
go.property("etoile_click", 0)
-- Cursor
go.property("wheelclick", false) -- Wheel pressed ?
go.property("wheelclick_pos", 0) -- pos of the cursor on the screen
go.property("wheelclick_camera_pos", 0) -- 
-- Last time click
go.property("pressed_time", socket.gettime())
go.property("wheel", 0) -- Allow the wheel function to accept inputs.


function init(self)
	
	msg.post(".", "acquire_input_focus")
	self.collision_id = nil  -- The cursor activate no collision on start.
	
end

local function Wheel_Zoom(sens, self)
	self.wheel = 0
end

local function Wheel_Zoom_Elements(tint1)
	for i = 1,galaxie["Nombre_Etoiles"] do 
		local tmp_Etoile = galaxie.etoiles.id[i]["/StarSystem"]
		local tmp_Etoile_Label = galaxie.etoiles.id[i]["/StarSystemLabel"]
		local lointaine = msg.url(nil, tmp_Etoile, "Etoile")
		local proche = msg.url(nil, tmp_Etoile, "Etoile_proche")
		local label = msg.url(nil, tmp_Etoile_Label, "label")
		if tint1 < 2 then
			sprite.set_constant(proche, "tint", vmath.vector4(1, 1, 1, tint1))
		end
		go.set("/Curseur#sprite", "scale.x", 1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
		go.set("/Curseur#sprite", "scale.y", 1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
		go.set(lointaine, "scale.y", 1.5*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
		go.set(lointaine, "scale.x", 1.5*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
		go.set(proche, "scale.y", 1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
		go.set(proche, "scale.x", 1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
		go.set(tmp_Etoile_Label, "position.y", -32*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
		go.set(tmp_Etoile_Label, "scale.y", 1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
		go.set(tmp_Etoile_Label, "scale.x", 1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))

		-- Show / Hide stars label
		if game_ref.zoom.state == game_ref.zoom.show_label+1 then
			msg.post(tmp_Etoile_Label, "enable")
		elseif game_ref.zoom.state == game_ref.zoom.show_label then
			msg.post(tmp_Etoile_Label, "disable")
		end		
	end
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	self.collision_id = nil
	
	
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("etoile_click") then
		if message.click == true then
			self.etoile_click = message.id
		else
			self.etoile_click = 0
		end
	end


	
end

function on_input(self, action_id, action)
	local position = go.get_position()
	
	local position_camera = go.get_position("/Camera#camera")
	
	if action.x and action.y then
		local action_x, action_y = screen_to_world(action.x, action.y, 9)
		local a = vmath.vector3(action_x, action_y, 1)
		go.set_position(a, ".")	
	end
		
	if action_id == hash("Touch") and action.pressed then
		if self.etoile_click ~= 0 then
			pprint(galaxie.etoiles.nom[self.etoile_click])
		else
			pprint("*** CLICK ! ***")
		end
	end

	if action.released then
		self.wheelclick = false
	elseif (action.pressed  and (action_id == hash("wheelclick"))) then
		self.wheelclick = true
		self.wheelclick_pos = vmath.vector3(action.x, action.y, 10)
		self.wheelclick_camera_pos = position_camera
	end
	
		
	if self.wheelclick == true then
		-- moving camera with the mouse
		local pos = self.wheelclick_camera_pos + (self.wheelclick_pos - vmath.vector3(action.x, action.y, 0)) --  / game_ref.zoom.state
		if pos.x < 1 then
			pos.x = 1
		end
		if pos.y < 1 then
			pos.y = 0
		end
		if pos.x > galaxie.Taille.Map_X then
			pos.x = galaxie.Taille.Map_X
		end
		if pos.y > galaxie.Taille.Map_Y then
			pos.y = galaxie.Taille.Map_Y
		end
		-- go.set_position(pos)			
		go.set_position(pos,"/Camera#camera")
	elseif action_id == hash("Up") and (position_camera.y < galaxie.Taille.Map_Y)  then
		position.y = position.y + (5 / game_ref.zoom.state)
		position_camera.y = position_camera.y + (5 / game_ref.zoom.state)
		go.set_position(position)
		go.set_position(position_camera,"/Camera#camera")
	elseif action_id == hash("Down") and (position_camera.y > 0) then
		position.y = position.y - (5 / game_ref.zoom.state)
		position_camera.y = position_camera.y - (5 / game_ref.zoom.state)
		go.set_position(position)
		go.set_position(position_camera,"/Camera#camera")
	elseif action_id == hash("Left") and (position_camera.x > 0) then
		position.x = position.x - (5 / game_ref.zoom.state)
		position_camera.x = position_camera.x - (5 / game_ref.zoom.state)
		go.set_position(position)
		go.set_position(position_camera,"/Camera#camera")
	elseif action_id == hash("Right") and (position_camera.x < galaxie.Taille.Map_X) then
		position.x = position.x + (5 / game_ref.zoom.state)
		position_camera.x = position_camera.x + (5 / game_ref.zoom.state)
		go.set_position(position)
		go.set_position(position_camera,"/Camera#camera")

		-- zooming
	elseif action_id == hash("wheelup") and self.wheel < 1 and game_ref.zoom.max > game_ref.zoom.state  then
		self.wheel = 1
		Wheel_Zoom(1, self)
		game_ref.zoom.state = game_ref.zoom.state + 1
		go.set("/Camera#camera", "orthographic_zoom", 1*(math.pow(game_ref.zoom.gap, game_ref.zoom.state)))
		if game_ref.zoom.state == game_ref.zoom.proche+1 then
			Wheel_Zoom_Elements(1)
		else
			Wheel_Zoom_Elements(2)
		end
	elseif action_id == hash("wheeldown") and self.wheel < 1 and game_ref.zoom.min < game_ref.zoom.state  then
		self.wheel = 1
		Wheel_Zoom(2, self)
		game_ref.zoom.state = game_ref.zoom.state - 1
		go.set("/Camera#camera", "orthographic_zoom", 1*(math.pow(game_ref.zoom.gap, game_ref.zoom.state)))
		if game_ref.zoom.state == game_ref.zoom.proche then
			Wheel_Zoom_Elements(0)
		else
			Wheel_Zoom_Elements(2)
		end
	end
end
