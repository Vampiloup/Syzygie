-- ID from Star triggered by cursor entry
go.property("etoile_click", 0)
-- Cursor
go.property("wheelclick", false) -- Wheel pressed ?
go.property("wheelclick_pos", 0) -- pos of the cursor on the screen
go.property("wheelclick_camera_pos", 0) -- 
-- Last time click
go.property("pressed_time", socket.gettime())

function init(self)
	
	msg.post(".", "acquire_input_focus")
	self.collision_id = nil  -- The cursor activate no collision on start.

	
	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	self.collision_id = nil
	
	
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("etoile_click") then
		if message.click == true then
			self.etoile_click = message.id
		else
			self.etoile_click = 0
		end
	end


	
end

function on_input(self, action_id, action)

	-- temporary zoom variable
	zoom = 1
	local position = go.get_position()
	
	local position_camera = go.get_position("/Camera#camera")
	
	if action.x and action.y then
		local action_x, action_y = screen_to_world(action.x, action.y, 9)
		local a = vmath.vector3(action_x, action_y, 1)
		go.set_position(a, ".")	
	end
		
	if action_id == hash("Touch") and action.pressed then
		if self.etoile_click ~= 0 then
			pprint(galaxie.etoiles.nom[self.etoile_click])
		else
			pprint("*** CLICK ! ***")
		end
	end

	if action.pressed  and (action_id == hash("wheelclick")) then
		pprint(action)
		self.wheelclick = true
		self.wheelclick_pos = vmath.vector3(action.x, action.y, 10)
		self.wheelclick_camera_pos = position_camera
	elseif action.released then
		self.wheelclick = false
	end
	
		
	if self.wheelclick == true then
		-- moving camera with the mouse
		local pos = self.wheelclick_camera_pos + (self.wheelclick_pos - vmath.vector3(action.x, action.y, 0)) / zoom
		
		if pos.x < 1 then
			pos.x = 1
		end
		if pos.y < 1 then
			pos.y = 0
		end
		if pos.x > galaxie.Taille.Map_X then
			pos.x = galaxie.Taille.Map_X
		end
		if pos.y > galaxie.Taille.Map_Y then
			pos.y = galaxie.Taille.Map_Y
		end
		-- go.set_position(pos)			
		go.set_position(pos,"/Camera#camera")
	elseif action_id == hash("Up") and (position_camera.y < galaxie.Taille.Map_Y)  then
		print("up !")
		position.y = position.y + (5 / zoom)
		position_camera.y = position_camera.y + (5 / zoom)
		go.set_position(position)
		go.set_position(position_camera,"/Camera#camera")
	elseif action_id == hash("Down") and (position_camera.y > 0) then
		print("down !")
		position.y = position.y - (5 / zoom)
		position_camera.y = position_camera.y - (5 / zoom)
		go.set_position(position)
		go.set_position(position_camera,"/Camera#camera")
	elseif action_id == hash("Left") and (position_camera.x > 0) then
		print("left !")
		position.x = position.x - (5 / zoom)
		position_camera.x = position_camera.x - (5 / zoom)
		go.set_position(position)
		go.set_position(position_camera,"/Camera#camera")
	elseif action_id == hash("Right") and (position_camera.x < galaxie.Taille.Map_X) then
		print("right !")
		position.x = position.x + (5 / zoom)
		position_camera.x = position_camera.x + (5 / zoom)
		go.set_position(position)
		go.set_position(position_camera,"/Camera#camera")
	end

end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
