function afficher_etoile_bar(self, message)

	pprint("Star : I'm clicked ! ".. galaxie.etoiles.nom[message.etoile])
	label.set_text("Label_Star", galaxie.etoiles.nom[message.etoile])

end

function init(self)
	-- Adapt the Bar to the Screen Size
	local vector = 	vmath.vector3(1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)), 1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)), 1.0)
	-- go.set(".", "scale", vmath.vector3(1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)), 1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)), 1.0))
	go.set_scale(vector, ".")
	msg.post(".", "disable")
	msg.post("CollisionObject", "disable")
	msg.post("Label_Star", "disable")

--	-- Label : Star name
--
--	go.set("Label_Star_Name", "scale.x", 1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
--	go.set("Label_Star_Name", "scale.y", 1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))
--	go.set("Label_Star_Name", "position.y", 500*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)))

	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	local world_x, world_y  = screen_to_world(160, game_ref.screen_Y/2,1)
	go.set_position(vmath.vector3(world_x, world_y, 4), ".")
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)

	if message_id == hash("unclick") then
		msg.post(".", "disable")
		msg.post("CollisionObject", "disable")
		msg.post("Label_Star", "disable")
	elseif message_id == hash("click") then
		msg.post("Label_Star", "enable")
		msg.post("CollisionObject", "enable")
		if message.orbital then
			afficher_etoile_bar(self, message)
		elseif message.etoile then
			afficher_etoile_bar(self, message)
		else
			pprint("Screen_Star : What has been clicked ? -- line 61")
			pprint(message)
		end
	elseif message_id == hash("on_collision") then
		-- If cursor enter or exit the local Collision box
		if message.collision_message then
			pprint("Gui Entr√©e")
			msg.post("/Curseur", "GUI_entree", {gui = "Screen_Star", entree = true})
		elseif message.collision_message == false then
			pprint("Gui Sortie")
			msg.post("/Curseur", "GUI_entree", {gui = "Screen_Star", entree = false})
		end	
	elseif message_id == hash("zoom") then
		local vector = 	vmath.vector3(1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)), 1*(math.pow(game_ref.zoom.gap, -game_ref.zoom.state)), 1.0)
		go.set_scale(vector, ".")

	end
		
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
